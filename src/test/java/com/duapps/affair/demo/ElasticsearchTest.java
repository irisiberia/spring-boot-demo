package com.duapps.affair.demo;import com.google.common.base.Stopwatch;import org.elasticsearch.common.geo.GeoPoint;import com.alibaba.fastjson.JSONObject;import com.duapps.affair.demo.elasticsearch.model.*;import com.duapps.affair.demo.elasticsearch.request.StoreReq;import com.duapps.affair.demo.elasticsearch.service.EsDataService;import com.duapps.affair.demo.elasticsearch.service.EsIndexService;import com.duapps.affair.demo.elasticsearch.service.StoreService;import com.google.common.collect.Maps;import org.assertj.core.util.Lists;import org.elasticsearch.action.update.UpdateRequest;import org.elasticsearch.common.unit.DistanceUnit;import org.elasticsearch.index.query.BoolQueryBuilder;import org.elasticsearch.index.query.GeoDistanceQueryBuilder;import org.elasticsearch.index.query.QueryBuilder;import org.elasticsearch.index.query.QueryBuilders;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.data.domain.PageRequest;import org.springframework.data.elasticsearch.core.ElasticsearchRestTemplate;import org.springframework.data.elasticsearch.core.document.Document;import org.springframework.data.elasticsearch.core.mapping.IndexCoordinates;import org.springframework.data.elasticsearch.core.query.NativeSearchQueryBuilder;import org.springframework.data.elasticsearch.core.query.UpdateQuery;import org.springframework.test.context.junit4.SpringRunner;import javax.annotation.Resource;import java.lang.reflect.Method;import java.math.BigDecimal;import java.util.Date;import java.util.List;import java.util.Map;import java.util.Random;import java.util.concurrent.TimeUnit;/** * @Author he.zhou * @Date 2020-06-25 */@RunWith(SpringRunner.class)@SpringBootTestpublic class ElasticsearchTest {    @Resource    private StoreService storeService;    @Resource    private ElasticsearchRestTemplate elasticsearchRestTemplate;    @Resource    private EsDataService esDataService;    @Resource    private EsIndexService esIndexService;    @Test    public void save() {        StoreTags storeTags = new StoreTags();        storeTags.setKey("第一个");        storeTags.setValue("撒大声地");        storeTags.setShowName("便利蜂");        StoreTags storeTags2 = new StoreTags();        storeTags2.setKey("第二个");        storeTags2.setValue("撒大声地");        storeTags2.setShowName("苏宁");        StoreBaseInfo baseInfo = new StoreBaseInfo();        baseInfo.setAddress("北市");        baseInfo.setShortName("cecece");        baseInfo.setStoreId("1212121333332");        baseInfo.setCreatedTime(new Date());        baseInfo.setUpdatedTime(new Date());        StoreDocument document = new StoreDocument();        document.setId(1007L);        document.setCode("天津市");        document.setBaseInfo(baseInfo);        document.setTags(Lists.newArrayList(storeTags, storeTags2));        storeService.saveStore(document);    }    @Test    public void indexTest() {        StoreTags storeTags = new StoreTags();        storeTags.setKey("第一个");        storeTags.setValue("撒大声地");        storeTags.setShowName("便利蜂");        StoreTags storeTags2 = new StoreTags();        storeTags2.setKey("第二个");        storeTags2.setValue("撒大声地");        storeTags2.setShowName("苏宁");        StoreBaseInfo baseInfo = new StoreBaseInfo();        baseInfo.setAddress("北京市");        baseInfo.setShortName("喂喂2222喂");        baseInfo.setStoreId("1212121333332");        baseInfo.setCreatedTime(new Date());        baseInfo.setUpdatedTime(new Date());        StoreDocument document = new StoreDocument();        document.setId(1008L);        document.setCode("北京");        document.setBaseInfo(baseInfo);        document.setTags(Lists.newArrayList(storeTags, storeTags2));        elasticsearchRestTemplate.save(document);        elasticsearchRestTemplate.deleteIndex(StoreDocument.class);    }    @Test    public void update() {        Map<String, Object> map = Maps.newHashMap();        map.put("baseInfo.address", "天津市和平区");        UpdateQuery query = UpdateQuery.builder("1005")                .withScript("2232323")                .withDocument(Document.create())                .withParams(map)                .build();        elasticsearchRestTemplate.update(query, IndexCoordinates.of("store"));    }    @Test    public void findById() {        StoreDocument storeDocument = esDataService.findById(StoreDocument.class, 1004l);        System.out.println(JSONObject.toJSONString(storeDocument));    }    @Test    public void search2() {        StoreReq request = new StoreReq();//        request.setCode("更新过啦");        request.setBaseInfoAddress("北京市");        request.setCurrentPage(1);        request.setPageSize(7);        EsResult<List<StoreDocument>> search = esDataService.search(StoreDocument.class, request);        System.out.println("ssss");    }    @Test    public void searchByQuery() {        QueryBuilder mustBuilder = QueryBuilders.boolQuery()                .must(QueryBuilders.matchQuery("baseInfo.address.keyword", "北京市"));        QueryBuilder orBuilder = QueryBuilders.boolQuery().should(QueryBuilders.matchQuery("baseInfo.shortName", "海河科技园"));        QueryBuilder queryBuilder2 = QueryBuilders.boolQuery()                .should(mustBuilder)                .should(orBuilder);        NativeSearchQueryBuilder queryBuilders = new NativeSearchQueryBuilder();        queryBuilders.withQuery(mustBuilder);        EsResult<List<StoreDocument>> search = esDataService.search(StoreDocument.class, queryBuilders.build());        System.out.println(search.getTotalCount());    }    @Test    public void findOne() {        StoreReq request = new StoreReq();        request.setCode("更新过啦");        request.setCurrentPage(1);        request.setPageSize(3);        StoreDocument storeDocument = esDataService.findOne(StoreDocument.class, request);        System.out.println("ssss");    }    @Test    public void createOne() {        StoreTags storeTags = new StoreTags();        storeTags.setKey("第343个");        storeTags.setValue("撒大声地");        storeTags.setShowName("苏宁");        StoreTags storeTags2 = new StoreTags();        storeTags2.setKey("丰富的非个");        storeTags2.setValue("撒大声地所多");        storeTags2.setShowName("苏宁");        StoreBaseInfo baseInfo = new StoreBaseInfo();        baseInfo.setAddress("天津市和平区12121");        baseInfo.setShortName("海河科技园");        baseInfo.setStoreId("19019210");        baseInfo.setCreatedTime(new Date());        baseInfo.setUpdatedTime(new Date());        StoreDocument document = new StoreDocument();        document.setId(1005L);        document.setCode("北京市");        document.setBaseInfo(baseInfo);        document.setTags(Lists.newArrayList(storeTags, storeTags2));        StoreDocument save = esDataService.save(document);    }    @Test    public void deleteOne() {        esDataService.delete(StoreDocument.class, "1003");        esDataService.delete(StoreDocument.class, "1004");        esDataService.delete(StoreDocument.class, "1005");        esDataService.delete(StoreDocument.class, "1006");    }    @Test    public void createIndrx() {        esIndexService.createIndex(UserLocation.class);        }    @Test    public void geoPoint() {        for (int i = 1; i < 100000; i++) {            String lon = randomLonLat(73, 135, 3, 53, "Lon");            String lat = randomLonLat(73, 135, 3, 53, "Lat");            GeoPoint geoPoint = new GeoPoint(Double.parseDouble(lat), Double.parseDouble(lon));            UserLocation userLocation = new UserLocation();            userLocation.setId((long) i);            userLocation.setUserId((long) i);            userLocation.setLocation(geoPoint);            esDataService.save(userLocation);        }    }    @Test    public void getPoint() {        NativeSearchQueryBuilder queryBuilders = new NativeSearchQueryBuilder();        BoolQueryBuilder boolQueryBuilder = new BoolQueryBuilder();        // 以某点为中心，搜索指定范围        GeoDistanceQueryBuilder distanceQueryBuilder = new GeoDistanceQueryBuilder("location");        distanceQueryBuilder.point(45.577081, 134.426583);        // 定义查询单位：公里        distanceQueryBuilder.distance(100, DistanceUnit.METERS);        boolQueryBuilder.filter(distanceQueryBuilder);//        QueryBuilder mustBuilder = QueryBuilders.boolQuery()//                .must(distanceQueryBuilder)//                .must(QueryBuilders.termsQuery("id", Lists.newArrayList(2936L)));        queryBuilders.withQuery(boolQueryBuilder)                .withPageable(PageRequest.of(0, 10));        Stopwatch stp = Stopwatch.createStarted();        EsResult<List<UserLocation>> list = esDataService.search(UserLocation.class, queryBuilders.build());        System.out.println(JSONObject.toJSONString(list));        System.out.println(stp.stop());    }    /**     * @param MinLon：最新经度 MaxLon： 最大经度   MinLat：最新纬度   MaxLat：最大纬度    type：设置返回经度还是纬度     * @return     * @throws     * @Title: randomLonLat     * @Description: 在矩形内随机生成经纬度     */    public static String randomLonLat(double MinLon, double MaxLon, double MinLat, double MaxLat, String type) {        Random random = new Random();        BigDecimal db = new BigDecimal(Math.random() * (MaxLon - MinLon) + MinLon);        String lon = db.setScale(6, BigDecimal.ROUND_HALF_UP).toString();// 小数后6位        db = new BigDecimal(Math.random() * (MaxLat - MinLat) + MinLat);        String lat = db.setScale(6, BigDecimal.ROUND_HALF_UP).toString();        if (type.equals("Lon")) {            return lon;        } else {            return lat;        }    }    public static void main(String[] args) {        System.out.println(randomLonLat(73, 135, 3, 53, "Lon"));        System.out.println(randomLonLat(73, 135, 3, 53, "Lat"));    }}