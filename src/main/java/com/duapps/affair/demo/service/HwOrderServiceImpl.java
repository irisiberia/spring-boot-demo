package com.duapps.affair.demo.service;import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;import com.baomidou.mybatisplus.core.conditions.update.UpdateWrapper;import com.baomidou.mybatisplus.core.metadata.IPage;import com.baomidou.mybatisplus.extension.plugins.pagination.Page;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;import com.duapps.affair.demo.bean.HwOrder;import com.duapps.affair.demo.bean.OrderRequest;import com.duapps.affair.demo.bean.Pager;import com.duapps.affair.demo.dao.HwOrderMDao;import com.google.common.collect.Lists;import lombok.extern.slf4j.Slf4j;import org.springframework.stereotype.Service;import javax.annotation.Resource;import java.util.ArrayList;import java.util.List;import java.util.Objects;/** * @Author he.zhou * @Date 2020-12-02 */@Service@Slf4jpublic class HwOrderServiceImpl extends ServiceImpl<HwOrderMDao, HwOrder> implements HwOrderService {    @Resource    private HwOrderMDao hwOrderMDao;    @Override    public void insert(HwOrder hwOrder) {        save(hwOrder);    }    @Override    public HwOrder getOrderByOrderId(String openId) {        return hwOrderMDao.selectOne(new QueryWrapper<HwOrder>().eq("open_id", openId));    }    @Override    public void updateConsumptionState(String orderId, int status) {        update(new UpdateWrapper<HwOrder>().set("price", status)                .in("order_id", Lists.newArrayList("111", "1ewe11")));        return;    }    @Override    public List<HwOrder> getOrderByOpenIds(List<String> openIds) {        return hwOrderMDao.getByOrderId("22222222");    }    @Override    public HwOrder selectById(Long id) {        return getById(id);    }    @Override    public void update(HwOrder order) {//        hwOrderMDao.update(order, new UpdateWrapper<HwOrder>().eq("id", 5));        hwOrderMDao.updateById(order);    }    @Override    public Pager<HwOrder> getByPageRequest(OrderRequest request) {        QueryWrapper<HwOrder> queryWrapper = new QueryWrapper<HwOrder>()                .eq(!Objects.isNull(request.getConsumptionStat()), "consumption_state", request.getConsumptionStat())                .orderByDesc("id");        Page page = new Page<HwOrder>(request.getCurrentPage(), request.getPageSize());        IPage orderIPage = page(page, queryWrapper);        List<HwOrder> orderList = new ArrayList<>(orderIPage.getRecords());        long s = orderIPage.getSize();        long c = orderIPage.getCurrent();        return Pager.of(orderIPage.getTotal(), Integer.valueOf(String.valueOf(s)), Integer.valueOf(String.valueOf(c)), orderList);    }}