package com.duapps.affair.demo.elasticsearch.service;import com.duapps.affair.demo.elasticsearch.model.EsResult;import com.duapps.affair.demo.elasticsearch.request.EsBaseReq;import org.springframework.data.elasticsearch.core.query.Query;import javax.validation.constraints.NotBlank;import javax.validation.constraints.NotEmpty;import javax.validation.constraints.NotNull;import java.util.List;/** * 对ElasticSearch 数据操作 * * @Author he.zhou * @Date 2020-08-25 */public interface EsDataService {    /**     * 添加一条数据     *     * @param t obj     */    <T> T save(@NotNull T t);    /**     * 批量添加数据     *     * @param tList     */    <T> boolean batchSave(@NotEmpty List<T> tList);    /**     * 单个更新     *     * @param t     * @param <T>     * @return     */    <T> boolean update(@NotNull T t);    /**     * 批量更新     *     * @param tList     * @param <T>     * @return     */    <T> boolean batchUpdate(@NotEmpty List<T> tList);    /**     * 删除     *     * @param clazz     * @param id     * @param <T>     * @return     */    <T> boolean delete(@NotNull Class<T> clazz, @NotBlank String id);    /**     * 批量删除     *     * @param clazz     * @param idList     * @param <T>     * @return     */    <T> boolean batchDelete(@NotNull Class<T> clazz, @NotEmpty List<String> idList);    /**     * 根据id查询一个对象     *     * @param clazz     * @param id     * @return     */    <T> T findById(@NotNull Class<T> clazz, @NotBlank Long id);    /**     * 根据查询条件查询对象     *     * @param clazz     * @param query     * @return     */    <T> T findOne(@NotNull Class<T> clazz, @NotNull Query query);    /**     * 根据查询条件查询对象     *     * @param clazz     * @param req     * @return     */    <T> T findOne(@NotNull Class<T> clazz, @NotNull EsBaseReq req);    /**     * 查询某个对象的所有数据，慎用     *     * @param clazz     * @return     */    <T> EsResult<List<T>> findAll(@NotNull Class<T> clazz);    /**     * 查询某个对象的所有数据，提供分页排序参数     *     * @param clazz     * @param request     * @return     */    <T> EsResult<List<T>> findAll(@NotNull Class<T> clazz, @NotNull EsBaseReq request);    /**     * 根据条件查询数据     *     * @param t     * @param query     * @return     */    <T> EsResult<List<T>> search(@NotNull Class<T> t, @NotNull Query query);    /**     * 根据es查询条件查询     *     * @param t     * @param request     * @return     */    <T> EsResult<List<T>> search(@NotNull Class<T> t, @NotNull EsBaseReq request);    /**     * 手写dsl查询条件查询数据     *     * @param t     * @param dsl     * @return     */    <T> EsResult<List<T>> dslSearch(@NotNull Class<T> t, @NotBlank(message = "dsl语句不能为空") String dsl);    /**     * 使用SQL 条件查询数据     *     * @param t     * @param sql     * @return     */    <T> List<T> sqlSearch(@NotNull Class<T> t, @NotBlank(message = "sql语句不能为空") String sql);    /**     * 使用SQL查询单个对象     *     * @param t     * @param sql     * @return     */    <T> T sqlFindOne(@NotNull Class<T> t, @NotBlank(message = "sql语句不能为空") String sql);}