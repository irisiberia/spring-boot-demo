package com.duapps.affair.demo.elasticsearch.service.impl;import com.duapps.affair.demo.elasticsearch.model.EsPageable;import com.duapps.affair.demo.elasticsearch.model.EsResult;import com.duapps.affair.demo.elasticsearch.request.EsBaseReq;import com.duapps.affair.demo.elasticsearch.service.EsDataService;import com.duapps.affair.demo.elasticsearch.util.EsQueryParse;import com.google.gson.Gson;import org.elasticsearch.client.RestClient;import org.elasticsearch.index.query.QueryBuilders;import org.elasticsearch.search.sort.SortBuilder;import org.elasticsearch.search.sort.SortBuilders;import org.elasticsearch.search.sort.SortOrder;import org.springframework.core.annotation.AnnotationUtils;import org.springframework.data.domain.Sort;import org.springframework.data.elasticsearch.annotations.Document;import org.springframework.data.elasticsearch.core.ElasticsearchRestTemplate;import org.springframework.data.elasticsearch.core.SearchHit;import org.springframework.data.elasticsearch.core.SearchHits;import org.springframework.data.elasticsearch.core.mapping.IndexCoordinates;import org.springframework.data.elasticsearch.core.query.*;import org.springframework.stereotype.Service;import javax.annotation.Resource;import java.lang.annotation.Annotation;import java.util.ArrayList;import java.util.List;import java.util.stream.Collectors;/** * @Author he.zhou * @Date 2020-08-25 */@Servicepublic class EsDataServiceImpl implements EsDataService {    @Resource    private RestClient restClient;    @Resource    private ElasticsearchRestTemplate elasticsearchTemplate;    private static Gson gson = new Gson();    @Override    public <T> T save(T t) {        return elasticsearchTemplate.save(t);    }    @Override    public <T> boolean batchSave(List<T> tList) {        elasticsearchTemplate.save(tList);        return true;    }    @Override    public <T> boolean update(T t) {        return true;    }    @Override    public <T> boolean batchUpdate(List<T> tList) {        return true;    }    @Override    public <T> boolean delete(Class<T> clazz, String id) {        Annotation annotation = AnnotationUtils.getAnnotation(clazz, Document.class);        Document document = (Document) annotation;        IndexCoordinates index = IndexCoordinates.of(document.indexName());        elasticsearchTemplate.delete(id, index);        return true;    }    @Override    public <T> boolean batchDelete(Class<T> clazz, List<String> idList) {        Annotation annotation = AnnotationUtils.getAnnotation(clazz, Document.class);        Document document = (Document) annotation;        IndexCoordinates index = IndexCoordinates.of(document.indexName());        idList.forEach(id -> elasticsearchTemplate.delete(id, index));        return true;    }    @Override    public <T> T findById(Class<T> clazz, Long id) {        NativeSearchQueryBuilder queryBuilder = new NativeSearchQueryBuilder();        queryBuilder.withQuery(QueryBuilders.matchQuery("id", id));        SearchHit<T> searchHit = elasticsearchTemplate.searchOne(queryBuilder.build(), clazz);        return searchHit == null ? null : searchHit.getContent();    }    @Override    public <T> T findOne(Class<T> clazz, Query query) {        SearchHit<T> searchHit = elasticsearchTemplate.searchOne(query, clazz);        return searchHit == null ? null : searchHit.getContent();    }    @Override    public <T> T findOne(Class<T> clazz, EsBaseReq esBaseReq) {        Query query = EsQueryParse.convert2Query(esBaseReq);        SearchHit<T> searchHit = elasticsearchTemplate.searchOne(query, clazz);        return searchHit != null ? searchHit.getContent() : null;    }    @Override    public <T> EsResult<List<T>> findAll(Class<T> clazz) {        SearchHits<T> searchHits = elasticsearchTemplate.search(Query.findAll(), clazz);        List<T> data = searchHits.get().map(SearchHit::getContent).collect(Collectors.toList());        return EsResult.of(data, searchHits.getTotalHits());    }    @Override    public <T> EsResult<List<T>> findAll(Class<T> clazz, EsBaseReq request) {        Query query = new StringQuery(QueryBuilders.boolQuery().toString());        query.setPageable(EsPageable.getQueryPageable(request));        query.addSort(Sort.by("_id"));        SearchHits<T> search = elasticsearchTemplate.search(query, clazz);        List<T> data = search.get().map(SearchHit::getContent).collect(Collectors.toList());        long recordCount = search.getTotalHits();        return EsResult.of(data, recordCount);    }    @Override    public <T> EsResult<List<T>> search(Class<T> clazz, Query query) {        SearchHits<T> searchHit = elasticsearchTemplate.search(query, clazz);        List<T> data = searchHit.get().map(SearchHit::getContent).collect(Collectors.toList());        long recordCount = searchHit.getTotalHits();        return EsResult.of(data, recordCount);    }    @Override    public <T> EsResult<List<T>> search(Class<T> t, EsBaseReq request) {        //组装查询        Query query = EsQueryParse.convert2Query(request);        //组装分页        query.setPageable(EsPageable.getQueryPageable(request));        //组装排序        query.addSort(EsPageable.getQuerySort(request));        SearchHits<T> searchHits = elasticsearchTemplate.search(query, t);        List<T> data = searchHits.get().map(SearchHit::getContent).collect(Collectors.toList());        long recordCount = searchHits.getTotalHits();        return EsResult.of(data, recordCount);    }    @Override    public <T> EsResult<List<T>> dslSearch(Class<T> t, String dsl) {        StringQuery stringQuery = new StringQuery(dsl);        SearchHits<T> searchHits = elasticsearchTemplate.search(stringQuery, t);        List<T> data = searchHits.get().map(SearchHit::getContent).collect(Collectors.toList());        long recordCount = searchHits.getTotalHits();        return EsResult.of(data, recordCount);    }    @Override    public <T> T sqlFindOne(Class<T> t, String sql) {        String queryStr = String.format("{\"query\":\"%s\", \"fetch_size\":1}", sql);        return restClientSearch(t, queryStr).stream().findFirst().orElse(null);    }    @Override    public <T> List<T> sqlSearch(Class<T> t, String sql) {        String queryStr = String.format("{\"query\":\"%s\"}", sql);        return restClientSearch(t, queryStr);    }    /**     * 使用restClient 查询数据     *     * @param t     * @param queryStr sql_dsl查询条件     * @return     */    private <T> List<T> restClientSearch(Class<T> t, String queryStr) {//        try {//            Request request = new Request("POST", "/_xpack/sql");//            request.setJsonEntity(queryStr);////            Response response = restClient.performRequest(request);//            String jsonData = EntityUtils.toString(response.getEntity());////            SQLRestResponse sqlRestResponse = gson.fromJson(jsonData, SQLRestResponse.class);//            SQLResult<T> sqlResult = ResultUtil.buildFetchSQLResult(sqlRestResponse, t, (SQLResult<T>) null);////            return sqlResult.getDatas();//        } catch (IOException e) {//            e.printStackTrace();//        }        return new ArrayList<>();    }}