package com.duapps.affair.demo.elasticsearch.util;import org.apache.commons.lang3.ClassUtils;import org.apache.commons.lang3.StringUtils;import org.elasticsearch.index.query.*;import org.springframework.data.elasticsearch.core.query.NativeSearchQueryBuilder;import org.springframework.data.elasticsearch.core.query.Query;import java.lang.reflect.Field;import java.lang.reflect.InvocationTargetException;import java.util.List;/** * @Author he.zhou * @Date 2020-08-25 */public class EsQueryParse {    public static <T> Query convert2Query(T t) {        try {            NativeSearchQueryBuilder queryBuilder = new NativeSearchQueryBuilder();            Class<?> clazz = t.getClass();            Field[] fields = clazz.getDeclaredFields();            for (Field field : fields) {                Object value = ClassUtils.getPublicMethod(clazz, "get" + captureName(field.getName())).invoke(t);                if (value == null) {                    continue;                }                if (field.isAnnotationPresent(EsLike.class)) {                    WildcardQueryBuilder query = getLikeQuery(field, (String) value);                    queryBuilder.withQuery(query);                    continue;                }                if (field.isAnnotationPresent(EsEquals.class)) {                    MatchQueryBuilder query = getEqualsQuery(field, value);                    queryBuilder.withQuery(query);                    continue;                }                if (field.isAnnotationPresent(EsRange.class)) {                    RangeQueryBuilder rangeQueryBuilder = getRangeQuery(field, value);                    queryBuilder.withQuery(rangeQueryBuilder);                    continue;                }                if (field.isAnnotationPresent(EsIn.class)) {                    TermsQueryBuilder query = getInQuery(field, (List<?>) value);                    queryBuilder.withQuery(query);                }            }            return queryBuilder.build();        } catch (IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {            e.printStackTrace();        }        return Query.findAll();    }    private static TermsQueryBuilder getInQuery(Field field, List<?> value) {        EsIn esIn = field.getAnnotation(EsIn.class);        String filedName = StringUtils.isBlank(esIn.name()) ? field.getName() : esIn.name();        return QueryBuilders.termsQuery(filedName, value);    }    private static RangeQueryBuilder getRangeQuery(Field field, Object value) {        EsRange esRange = field.getAnnotation(EsRange.class);        String filedName = StringUtils.isBlank(esRange.name()) ? field.getName() : esRange.name();        RangeQueryBuilder rangeQueryBuilder = QueryBuilders.rangeQuery(filedName)                .includeLower(esRange.includeLower())                .includeUpper(esRange.includeUpper());        if (esRange.lt()) {            rangeQueryBuilder.gt(value);        }        if (esRange.gt()) {            rangeQueryBuilder.gt(value);        }        return rangeQueryBuilder;    }    private static MatchQueryBuilder getEqualsQuery(Field field, Object value) {        EsEquals esEquals = field.getAnnotation(EsEquals.class);        String filedName = StringUtils.isBlank(esEquals.name()) ? field.getName() : esEquals.name();        return QueryBuilders.matchQuery(filedName, value);    }    private static WildcardQueryBuilder getLikeQuery(Field field, String likeValue) {        EsLike esLike = field.getAnnotation(EsLike.class);        String filedName = StringUtils.isBlank(esLike.name()) ? field.getName() : esLike.name();        if (esLike.leftLike()) {            likeValue = "%" + likeValue;        }        if (esLike.rightLike()) {            likeValue = likeValue + "%";        }        return QueryBuilders.wildcardQuery(filedName, likeValue);    }    public static String captureName(String name) {        char[] cs = name.toCharArray();        cs[0] -= 32;        return String.valueOf(cs);    }}